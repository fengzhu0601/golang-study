package main

import "fmt"

func Map(type T1, T2)(s []T1, f func(T1) T2) []T2{
	r := make([]T2, len(s))
	for i, v := range s {
		r[i] = f(v)
	}
	return r
}

func Reduce(type T1, T2)(s []T1, initializer T2, f func(T2, T1) T2) T2 {
	r := initializer
	for _, v := range s {
		r = f(r, v)
	}
	return r
}

func Filter(type T)(s []T, f func(T) bool) []T {
	var r []T
	for _, v := range s {
		if f(v) {
			r = append(r, v)
		}
	}
	return r
}

func Keys(type K comparable, V interface{})(m map[K]V) []K {
	r := make([]K, 0, len(m))
	for k := range m {
		r = append(r, k)
	}
	return r
}

//****************************/
// Set is a set of values.
type Set(type T comparable) map[T] struct{}

// Make returns a set of some element type.
func Make(type T comparable)() Set(T) {
	return make(Set(T))
}

// Add adds v to the set s.
// If v is already in s this has no effect.
func (s Set(T)) Add(v T) {
	s[v] = struct{}{}
}

// Delete removes v from the set s.
// If v is not in s this has no effect.
func (s Set(T)) Delete(v T) {
	delete(s, v)
}

// Contains reports whether v is in s.
func (s Set(T)) Contains(v T) bool {
	_, ok := s[v]
	return ok
}

// Len reports the number of elements in s.
func (s Set(T)) Len() int {
	return len(s)
}

// Iterate invokes f on each element of s.
// It's OK for f to call the Delete method.
func (s Set(T)) Iterate(f func(T)) {
	for v := range s {
		f(v)
	}
}

func main() {
	s := []int{1,2,3}
	floats := Map(s, func(i int) float64 { return float64(i) })
    // Now floats is []float64{1.0, 2.0, 3.0}.
	fmt.Println(floats)

    sum := Reduce(s, 0, func(i, j int) int { return i + j })
    // Now sum is 6.
    fmt.Println(sum)

    evens := Filter(s, func(i int) bool { return i%2 == 0 })
    // Now evens is []int{2}.
    fmt.Println(evens)

    k := Keys(map[int]int{1:2, 2:4})
	// Now k is either []int{1, 2} or []int{2, 1}.
    fmt.Println(k)

	s1 := Make(int)()
	s1.Add(1)
	if s1.Contains(2){panic("unexpected 2")}
}
